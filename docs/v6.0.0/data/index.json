{"id":0,"name":"@xpack/logger - v6.0.0","kind":1,"flags":{},"originalName":"","children":[],"groups":[{"title":"Modules","children":[1,2]}],"is":{"declaration":false},"location":{"query":"index","hash":""},"text":{"readme":"<p><a href=\"https://www.npmjs.com/package/@xpack/logger\"><img src=\"https://img.shields.io/npm/v/@xpack/logger.svg\" alt=\"npm (scoped)\"></a>\n<a href=\"https://github.com/xpack/logger-ts/blob/xpack/LICENSE\"><img src=\"https://img.shields.io/github/license/xpack/logger-ts.svg\" alt=\"license\"></a>\n<a href=\"https://github.com/standard/ts-standard\"><img src=\"https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript\" alt=\"TS-Standard - Typescript Standard Style Guide\"></a>\n<a href=\"https://github.com/xpack/logger-ts/actions\"><img src=\"https://github.com/xpack/logger-ts/workflows/CI%20on%20Push/badge.svg\" alt=\"Actions Status\"></a>\n<a href=\"https://github.com/xpack/logger-ts/issues/\"><img src=\"https://img.shields.io/github/issues/xpack/logger-ts.svg\" alt=\"GitHub issues\"></a>\n<a href=\"https://github.com/xpack/logger-ts/pulls\"><img src=\"https://img.shields.io/github/issues-pr/xpack/logger-ts.svg\" alt=\"GitHub pulls\"></a></p>\n\n<a href=\"#a-generic-console-logger-class\" id=\"a-generic-console-logger-class\" style=\"color: inherit; text-decoration: none;\">\n  <h2>A generic console logger class</h2>\n</a>\n<p>A Node.js ES6 module with a generic console logger.</p>\n\n<a href=\"#prerequisites\" id=\"prerequisites\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Prerequisites</h2>\n</a>\n<p>A recent <a href=\"https://nodejs.org\">Node.js</a> (&gt;=14.13), since the TypeScript code\nis compiled into ECMAScript 2020 code.</p>\n\n<a href=\"#easy-install\" id=\"easy-install\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Easy install</h2>\n</a>\n<p>The module is available as\n<a href=\"https://www.npmjs.com/package/@xpack/logger\"><code>@xpack/logger</code></a>\nfrom the public <a href=\"https://www.npmjs.com\"><code>npmjs</code></a> repository;\nuse <code>npm</code> to install it inside the project where\nit is needed:</p>\n<pre><code class=\"language-console\">npm install @xpack/logger@latest\n</code></pre>\n<p>The module does not provide any executables, and generally there are no\nreasons to install it globally.</p>\n<p>The development repository is available from the GitHub\n<a href=\"https://github.com/xpack/logger-ts/\">xpack/logger-ts</a>\nproject.</p>\n\n<a href=\"#user-info\" id=\"user-info\" style=\"color: inherit; text-decoration: none;\">\n  <h2>User info</h2>\n</a>\n<p>This section is intended for those who want to use this module in their\nown projects.</p>\n<p>The <code>@xpack/logger</code> module can be imported in both TypeScript\nand JavaScript Node.js code:</p>\n<pre><code class=\"language-typescript\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">Logger</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>@xpack/xpm-liquid<span class=\"pl-pds\">'</span></span>\n</code></pre>\n<p>The typical use case is to create an instance of the Logger object,\nthen log messages at different levels:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">log</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Logger</span>({\n  level<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>info<span class=\"pl-pds\">'</span></span>\n})\n\n<span class=\"pl-smi\">log</span>.<span class=\"pl-en\">info</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\">// Displayed on stdout.</span>\n<span class=\"pl-smi\">log</span>.<span class=\"pl-en\">debug</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>world<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\">// Ignored.</span>\n</code></pre>\n<p>In more complex use cases, the log level can be tested and the (possibly)\nlong operations be performed only if necessary.</p>\n\n<a href=\"#log-levels\" id=\"log-levels\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Log levels</h3>\n</a>\n<p>The following strings are recognised as valid level names:</p>\n<pre><code class=\"language-typescript\"><span class=\"pl-k\">export</span> <span class=\"pl-k\">type</span> <span class=\"pl-en\">LogLevel</span> <span class=\"pl-k\">=</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>silent<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">|</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>error<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">|</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>warn<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">|</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>info<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">|</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>verbose<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">|</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>debug<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">|</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>trace<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">|</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>all<span class=\"pl-pds\">'</span></span>\n</code></pre>\n<p>Internally the string levels are converted to integer values,\nand these integers are used in comparisons. Higher values\nmean more verbosity.</p>\n\n<a href=\"#delaying-setting-the-log-level\" id=\"delaying-setting-the-log-level\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Delaying setting the log level</h3>\n</a>\n<p>There are cases when the logger must be created very early in the\nlife cycle of an application, even before it is practically possible\nto determine the log level.</p>\n<p>For these cases, if the logger is created without a log level,\nit is set to a <strong>preliminary state</strong>, and all log lines are\nstored in an internal buffer**, until the log\nlevel is set, when the buffer is walked and the lines are processed.</p>\n\n<a href=\"#constructor\" id=\"constructor\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Constructor</h3>\n</a>\n\n<a href=\"#loggerparams-constructorparameters\" id=\"loggerparams-constructorparameters\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>Logger(params: ConstructorParameters)</code></h4>\n</a>\n<p>The common use case is to create the logger instance with a <code>console</code> and a\nstring <code>level</code> name.</p>\n<pre><code class=\"language-typescript\"><span class=\"pl-k\">export</span> <span class=\"pl-k\">interface</span> <span class=\"pl-en\">LoggerParameters</span> {\n  <span class=\"pl-v\">level</span><span class=\"pl-k\">?:</span> <span class=\"pl-en\">LogLevel</span>\n  <span class=\"pl-v\">console</span><span class=\"pl-k\">?:</span> <span class=\"pl-en\">Console</span>\n}\n</code></pre>\n<p>If present, the <code>console</code> must be an object with at least two methods,\n<code>log()</code> and <code>error()</code>, as defined in the Node.js documentation for\n<a href=\"https://nodejs.org/dist/latest-v10.x/docs/api/console.html\">console</a>.</p>\n<p>By default, the system console is used.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">log</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Logger</span>({\n  console<span class=\"pl-k\">:</span> myConsole,\n  level<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>info<span class=\"pl-pds\">'</span></span>\n})\n</code></pre>\n<p>The <code>level</code> property is optional since it can be set later.\nWithout it, the constructor will\ncreate the logger in a preliminary state, and all log lines will be stored\nin an internal buffer until the log level is set.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">log</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Logger</span>()\n</code></pre>\n\n<a href=\"#managing-the-log-levels\" id=\"managing-the-log-levels\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Managing the log levels</h3>\n</a>\n<p>The log level is managed by a setter/getter pair.</p>\n\n<a href=\"#set-level-level-loglevel-setter\" id=\"set-level-level-loglevel-setter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>set level (level: LogLevel)</code> (setter)</h4>\n</a>\n<p>Set the log level. If this is the first time the log level is set, flush the\ninternal buffer.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-smi\">log</span>.<span class=\"pl-smi\">level</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>info<span class=\"pl-pds\">'</span></span>\n</code></pre>\n\n<a href=\"#get-level--loglevel-getter\" id=\"get-level--loglevel-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get level (): LogLevel</code> (getter)</h4>\n</a>\n<p>Get the current log level, as a string.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">log</span>.<span class=\"pl-smi\">level</span>)\n</code></pre>\n\n<a href=\"#get-haslevel--boolean-getter\" id=\"get-haslevel--boolean-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get hasLevel (): boolean</code> (getter)</h4>\n</a>\n<p>[Added in v2.1.0]\n[Changed to getters in v5.0.0]</p>\n<p>Return <code>true</code> if the level was set.</p>\n<p>Example:</p>\n<pre><code class=\"language-console\">if (!log.hasLevel) {\n  log.level = defaultLevel\n}\n</code></pre>\n\n<a href=\"#logging-lines\" id=\"logging-lines\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Logging lines</h3>\n</a>\n<p>All functions accept an optional string message and possibly some arguments,\nas processed by the standard Node.js\n<a href=\"https://nodejs.org/dist/latest-v10.x/docs/api/util.html#util_util_format_format_args\"><code>util.format(msg, ...args)</code></a>\nfunction.</p>\n\n<a href=\"#always-msg-any--3939-args-any-void\" id=\"always-msg-any--3939-args-any-void\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>always (msg: any = &#39;&#39;, ...args: any[]): void</code></h4>\n</a>\n<p>Log always, regardless of the log level, even <code>&#39;silent&#39;</code>, when no other\nmessages are logged. The message is passed via <code>console.log()</code></p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-smi\">log</span>.<span class=\"pl-en\">always</span>(version)\n</code></pre>\n\n<a href=\"#error-msg-any--3939-args-any-void\" id=\"error-msg-any--3939-args-any-void\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>error (msg: any = &#39;&#39;, ...args: any[]): void</code></h4>\n</a>\n<p>Log errors, if the log level is <code>&#39;error&#39;</code> or higher. The message is prefixed\nwith <code>error: </code> and passed via <code>console.error()</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-smi\">log</span>.<span class=\"pl-en\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Not good...<span class=\"pl-pds\">'</span></span>)\n</code></pre>\n\n<a href=\"#error-msg-error-void\" id=\"error-msg-error-void\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>error (msg: Error): void</code></h4>\n</a>\n<p>This is a special case when the input is an <code>Error</code> object. It is expanded,\nincluding a full stack trace, and passed via <code>console.error()</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-k\">try</span> {\n  <span class=\"pl-c\">// ...</span>\n} <span class=\"pl-k\">catch</span> (ex) {\n  <span class=\"pl-smi\">log</span>.<span class=\"pl-en\">error</span>(ex)\n}\n</code></pre>\n\n<a href=\"#output-msg-any--3939-args-any-void\" id=\"output-msg-any--3939-args-any-void\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>output (msg: any = &#39;&#39;, ...args: any[]): void</code></h4>\n</a>\n<p>Log errors, if the log level is <code>&#39;error&#39;</code> or higher. The message is passed\nvia <code>console.log</code>.</p>\n<p>It differs from <code>error()</code> by not prefixing the string with <code>error: </code> and using\n<code>console.log()</code> instead of <code>console.error()</code>.</p>\n<p>Examples:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-smi\">log</span>.<span class=\"pl-en\">output</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Not good either...<span class=\"pl-pds\">'</span></span>)\n</code></pre>\n<pre><code class=\"language-javascript\"><span class=\"pl-k\">try</span> {\n  <span class=\"pl-c\">// ...</span>\n} <span class=\"pl-k\">catch</span> (ex) {\n  <span class=\"pl-c\">// Do not show the stack trace.</span>\n  <span class=\"pl-smi\">log</span>.<span class=\"pl-en\">output</span>(<span class=\"pl-smi\">ex</span>.<span class=\"pl-smi\">message</span>)\n}\n</code></pre>\n\n<a href=\"#warn-msg-any--3939-args-any-void\" id=\"warn-msg-any--3939-args-any-void\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>warn (msg: any = &#39;&#39;, ...args: any[]): void</code></h4>\n</a>\n<p>Log warnings, if the log level is <code>&#39;warn&#39;</code> or higher. The message is prefixed\nwith <code>warning: </code> and passed via <code>console.error()</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-smi\">log</span>.<span class=\"pl-en\">warn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Beware...<span class=\"pl-pds\">'</span></span>)\n</code></pre>\n\n<a href=\"#info-msg-any--3939-args-any-void\" id=\"info-msg-any--3939-args-any-void\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>info (msg: any = &#39;&#39;, ...args: any[]): void</code></h4>\n</a>\n<p>Log informative messages, if the log level is <code>&#39;info&#39;</code> or higher.\nThe message is passed via <code>console.log()</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-smi\">log</span>.<span class=\"pl-en\">info</span>(title)\n</code></pre>\n\n<a href=\"#verbose-msg-any--3939-args-any-void\" id=\"verbose-msg-any--3939-args-any-void\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>verbose (msg: any = &#39;&#39;, ...args: any[]): void</code></h4>\n</a>\n<p>Log more informative messages, if the log level is <code>&#39;verbose&#39;</code> or higher.\nThe message is passed via <code>console.log()</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-smi\">log</span>.<span class=\"pl-en\">verbose</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Configurations:<span class=\"pl-pds\">'</span></span>)\n</code></pre>\n\n<a href=\"#debug-msg-any--3939-args-any-void\" id=\"debug-msg-any--3939-args-any-void\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>debug (msg: any = &#39;&#39;, ...args: any[]): void</code></h4>\n</a>\n<p>Log debug messages, if the log level is <code>&#39;debug&#39;</code> or higher.\nThe message is passed via <code>console.log()</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-smi\">log</span>.<span class=\"pl-en\">debug</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>spawn: <span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-s1\">cmd</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span><span class=\"pl-pds\">`</span></span>)\n</code></pre>\n\n<a href=\"#trace-msg-any--3939-args-any-void\" id=\"trace-msg-any--3939-args-any-void\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>trace (msg: any = &#39;&#39;, ...args: any[]): void</code></h4>\n</a>\n<p>Log debug messages, if the log level is <code>&#39;trace&#39;</code> or higher.\nThe message is passed via <code>console.log()</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-smi\">log</span>.<span class=\"pl-en\">trace</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-c1\">this</span><span class=\"pl-s1\">.</span><span class=\"pl-c1\">constructor</span><span class=\"pl-s1\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span>.doRun()<span class=\"pl-pds\">`</span></span>)\n</code></pre>\n\n<a href=\"#checking-log-levels\" id=\"checking-log-levels\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Checking log levels</h3>\n</a>\n<p>If the logging code is more complex than a single line,\nfor example it needs a long loop,\nit is recommended to explicitly check the log level and\nif not high enough, skip the code entirely.</p>\n<p>Example:</p>\n<pre><code class=\"language-javascript\">  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">log</span>.<span class=\"pl-smi\">isVerbose</span>) {\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">const</span> [<span class=\"pl-c1\">folderName</span>, <span class=\"pl-c1\">folder</span>] <span class=\"pl-k\">of</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">entries</span>(folders)) {\n      <span class=\"pl-smi\">log</span>.<span class=\"pl-en\">trace</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>'<span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-s1\">folderName</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span>' <span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-smi\">folder</span><span class=\"pl-s1\">.</span><span class=\"pl-smi\">toolchainOptions</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span><span class=\"pl-pds\">`</span></span>)\n    }\n  }\n</code></pre>\n<p>[Changed to getters in v3.0.0]</p>\n\n<a href=\"#get-issilent--boolean-getter\" id=\"get-issilent--boolean-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get isSilent (): boolean</code> (getter)</h4>\n</a>\n<p>Return <code>true</code> if the log level is <code>&#39;silent&#39;</code> or higher.</p>\n\n<a href=\"#get-iserror--boolean-getter\" id=\"get-iserror--boolean-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get isError (): boolean</code> (getter)</h4>\n</a>\n<p>Return <code>true</code> if the log level is <code>&#39;error&#39;</code> or higher.</p>\n\n<a href=\"#get-iswarn--boolean-getter\" id=\"get-iswarn--boolean-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get isWarn (): boolean</code> (getter)</h4>\n</a>\n<p>Return <code>true</code> if the log level is <code>&#39;warn&#39;</code> or higher.</p>\n\n<a href=\"#get-isinfo--boolean-getter\" id=\"get-isinfo--boolean-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get isInfo (): boolean</code> (getter)</h4>\n</a>\n<p>Return <code>true</code> if the log level is <code>&#39;info&#39;</code> or higher.</p>\n\n<a href=\"#get-isverbose--boolean-getter\" id=\"get-isverbose--boolean-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get isVerbose (): boolean</code> (getter)</h4>\n</a>\n<p>Return <code>true</code> if the log level is <code>&#39;verbose&#39;</code> or higher.</p>\n\n<a href=\"#get-isdebug--boolean-getter\" id=\"get-isdebug--boolean-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get isDebug (): boolean</code> (getter)</h4>\n</a>\n<p>Return <code>true</code> if the log level is <code>&#39;debug&#39;</code> or higher.</p>\n\n<a href=\"#get-istrace--boolean-getter\" id=\"get-istrace--boolean-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get isTrace (): boolean</code> (getter)</h4>\n</a>\n<p>Return <code>true</code> if the log level is <code>&#39;trace&#39;</code> or higher.</p>\n\n<a href=\"#get-isall--boolean-getter\" id=\"get-isall--boolean-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get isAll (): boolean</code> (getter)</h4>\n</a>\n<p>Return <code>true</code> if the log level is <code>&#39;all&#39;</code>.</p>\n\n<a href=\"#get-console--console-getter\" id=\"get-console--console-getter\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>get console (): Console</code> (getter)</h4>\n</a>\n<p>Return the console object associated with the logger.</p>\n\n<a href=\"#loggerdefaultlevel\" id=\"loggerdefaultlevel\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>Logger.defaultLevel</code></h4>\n</a>\n<p>A static definition with the default logger level (<code>info</code>).</p>\n\n<a href=\"#loggernumericlevels\" id=\"loggernumericlevels\" style=\"color: inherit; text-decoration: none;\">\n  <h4><code>Logger.numericLevels</code></h4>\n</a>\n<p>A static map with the internal values for the log levels.</p>\n\n<a href=\"#compatibility-notices\" id=\"compatibility-notices\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Compatibility notices</h2>\n</a>\n<p>According to <a href=\"https://semver.org\">semver</a> requirements,\nincompatible API changes require higher major numbers.</p>\n\n<a href=\"#v5x\" id=\"v5x\" style=\"color: inherit; text-decoration: none;\">\n  <h3>v5.x</h3>\n</a>\n<p>For consistency reasons, <code>hasLevel</code> was changed from a method to a getter.</p>\n<p>Internally, the log level starts as <code>undefined</code> instead of the\nstring <code>&#39;undefined&#39;</code>, as in previous versions.</p>\n<p>This should not be a problem, given that the method to check if\nthe level was set is via <code>hasLevel()</code>.</p>\n\n<a href=\"#v4x\" id=\"v4x\" style=\"color: inherit; text-decoration: none;\">\n  <h3>v4.x</h3>\n</a>\n<p>The code was migrated to TypeScript.</p>\n<p>The migration itself should not introduce any incompatibilities,\nactually it should be fairly compatible with the latest v3.x,\nbut, for just in case, the safer path was to consider it a major\nrelease.</p>\n\n<a href=\"#v3x\" id=\"v3x\" style=\"color: inherit; text-decoration: none;\">\n  <h3>v3.x</h3>\n</a>\n<p>All <code>isXyx</code> functions (returning a boolean related to\nthe log level) were changed to getters.</p>\n\n<a href=\"#v2x\" id=\"v2x\" style=\"color: inherit; text-decoration: none;\">\n  <h3>v2.x</h3>\n</a>\n<p>The logger constructor was changed to use the generic arguments object.</p>\n<p>If upgrading from previous versions, change the syntax from:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">log</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Logger</span>(<span class=\"pl-en\">console</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>info<span class=\"pl-pds\">'</span></span>)\n</code></pre>\n<p>to:</p>\n<pre><code class=\"language-javascript\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">log</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Logger</span>({\n  <span class=\"pl-en\">console</span>,\n  level<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>info<span class=\"pl-pds\">'</span></span>\n})\n</code></pre>\n\n<a href=\"#maintainer-amp-developer-info\" id=\"maintainer-amp-developer-info\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Maintainer &amp; developer info</h2>\n</a>\n<p>This page documents how to use this module in an user application.\nFor developer and maintainer information, see the separate\n<a href=\"https://github.com/xpack/logger-ts/blob/master/README-DEVELOPER.md\">README-DEVELOPER</a> and\n<a href=\"https://github.com/xpack/logger-ts/blob/master/README-MAINTAINER.md\">README-MAINTAINER</a>\npages.</p>\n\n<a href=\"#license\" id=\"license\" style=\"color: inherit; text-decoration: none;\">\n  <h2>License</h2>\n</a>\n<p>The original content is released under the\n<a href=\"https://opensource.org/licenses/MIT\">MIT License</a>, with all rights\nreserved to <a href=\"https://github.com/ilg-ul/\">Liviu Ionescu</a>.</p>\n"}}
